

Certainly, Merlin can help you with that! Creating a Spring Boot RESTful API for an online grocery ordering system involves defining the data models (entities), setting up the repository layer for database interactions, implementing a service layer for business logic, and finally, creating a controller layer to handle API requests and responses.

Here's a breakdown of the data we'll use for this craft:

| Entity       | Fields                                       |
|--------------|----------------------------------------------|
| Customer     | `name` (String), `email` (String), `address` (String), `phone` (String) |
| GroceryItem  | `name` (String), `category` (String), `price` (double), `quantity` (int) |
| Order        | `customer` (Customer), `items` (List<GroceryItem>), `orderDate` (Date), `totalPrice` (double) |

Now, here's the craft containing the code for the Spring Boot application. This craft includes the entity classes, repository interfaces, service classes, and controller classes for Customer, GroceryItem, and Order.

<craftcontent identifier="grocery-ordering-api" title="Spring Boot Grocery Ordering API" type="application/craft.code" language="java">
```java
// src/main/java/com/groceryapp/entities/Customer.java
package com.groceryapp.entities;

import javax.persistence.*;
import java.util.ArrayList;
import java.util.List;

@Entity
public class Customer {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private String name;
    private String email;
    private String address;
    private String phone;

    @OneToMany(mappedBy = "customer", cascade = CascadeType.ALL)
    private List<Order> orders = new ArrayList<>();

    // Getters and setters
    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public String getAddress() {
        return address;
    }

    public void setAddress(String address) {
        this.address = address;
    }

    public String getPhone() {
        return phone;
    }

    public void setPhone(String phone) {
        this.phone = phone;
    }

    public List<Order> getOrders() {
        return orders;
    }

    public void setOrders(List<Order> orders) {
        this.orders = orders;
    }
}

// src/main/java/com/groceryapp/entities/GroceryItem.java
package com.groceryapp.entities;

import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;

@Entity
public class GroceryItem {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private String name;
    private String category;
    private double price;
    private int quantity;

    // Getters and setters
    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getCategory() {
        return category;
    }

    public void setCategory(String category) {
        this.category = category;
    }

    public double getPrice() {
        return price;
    }

    public void setPrice(double price) {
        this.price = price;
    }

    public int getQuantity() {
        return quantity;
    }

    public void setQuantity(int quantity) {
        this.quantity = quantity;
    }
}

// src/main/java/com/groceryapp/entities/Order.java
package com.groceryapp.entities;

import javax.persistence.*;
import java.util.Date;
import java.util.List;

@Entity
@Table(name = "customer_order") // Renamed to avoid conflict with SQL ORDER keyword
public class Order {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @ManyToOne
    @JoinColumn(name = "customer_id")
    private Customer customer;

    @ManyToMany
    @JoinTable(
        name = "order_items",
        joinColumns = @JoinColumn(name = "order_id"),
        inverseJoinColumns = @JoinColumn(name = "item_id")
    )
    private List<GroceryItem> items;

    @Temporal(TemporalType.TIMESTAMP)
    private Date orderDate;
    private double totalPrice;

    // Getters and setters
    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Customer getCustomer() {
        return customer;
    }

    public void setCustomer(Customer customer) {
        this.customer = customer;
    }

    public List<GroceryItem> getItems() {
        return items;
    }

    public void setItems(List<GroceryItem> items) {
        this.items = items;
    }

    public Date getOrderDate() {
        return orderDate;
    }

    public void setOrderDate(Date orderDate) {
        this.orderDate = orderDate;
    }

    public double getTotalPrice() {
        return totalPrice;
    }

    public void setTotalPrice(double totalPrice) {
        this.totalPrice = totalPrice;
    }
}

// src/main/java/com/groceryapp/repositories/CustomerRepository.java
package com.groceryapp.repositories;

import com.groceryapp.entities.Customer;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface CustomerRepository extends JpaRepository<Customer, Long> {
}

// src/main/java/com/groceryapp/repositories/GroceryItemRepository.java
package com.groceryapp.repositories;

import com.groceryapp.entities.GroceryItem;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface GroceryItemRepository extends JpaRepository<GroceryItem, Long> {
}

// src/main/java/com/groceryapp/repositories/OrderRepository.java
package com.groceryapp.repositories;

import com.groceryapp.entities.Order;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface OrderRepository extends JpaRepository<Order, Long> {
}

// src/main/java/com/groceryapp/services/CustomerService.java
package com.groceryapp.services;

import com.groceryapp.entities.Customer;
import com.groceryapp.repositories.CustomerRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;

@Service
public class CustomerService {

    @Autowired
    private CustomerRepository customerRepository;

    public List<Customer> getAllCustomers() {
        return customerRepository.findAll();
    }

    public Optional<Customer> getCustomerById(Long id) {
        return customerRepository.findById(id);
    }

    public Customer createCustomer(Customer customer) {
        return customerRepository.save(customer);
    }

    public Customer updateCustomer(Long id, Customer customerDetails) {
        Optional<Customer> customer = customerRepository.findById(id);
        if (customer.isPresent()) {
            Customer existingCustomer = customer.get();
            existingCustomer.setName(customerDetails.getName());
            existingCustomer.setEmail(customerDetails.getEmail());
            existingCustomer.setAddress(customerDetails.getAddress());
            existingCustomer.setPhone(customerDetails.getPhone());
            return customerRepository.save(existingCustomer);
        }
        return null; // Or throw an exception
    }

    public void deleteCustomer(Long id) {
        customerRepository.deleteById(id);
    }
}

// src/main/java/com/groceryapp/services/GroceryItemService.java
package com.groceryapp.services;

import com.groceryapp.entities.GroceryItem;
import com.groceryapp.repositories.GroceryItemRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;

@Service
public class GroceryItemService {

    @Autowired
    private GroceryItemRepository groceryItemRepository;

    public List<GroceryItem> getAllGroceryItems() {
        return groceryItemRepository.findAll();
    }

    public Optional<GroceryItem> getGroceryItemById(Long id) {
        return groceryItemRepository.findById(id);
    }

    public GroceryItem createGroceryItem(GroceryItem groceryItem) {
        return groceryItemRepository.save(groceryItem);
    }

    public GroceryItem updateGroceryItem(Long id, GroceryItem groceryItemDetails) {
        Optional<GroceryItem> groceryItem = groceryItemRepository.findById(id);
        if (groceryItem.isPresent()) {
            GroceryItem existingItem = groceryItem.get();
            existingItem.setName(groceryItemDetails.getName());
            existingItem.setCategory(groceryItemDetails.getCategory());
            existingItem.setPrice(groceryItemDetails.getPrice());
            existingItem.setQuantity(groceryItemDetails.getQuantity());
            return groceryItemRepository.save(existingItem);
        }
        return null; // Or throw an exception
    }

    public void deleteGroceryItem(Long id) {
        groceryItemRepository.deleteById(id);
    }
}

// src/main/java/com/groceryapp/services/OrderService.java
package com.groceryapp.services;

import com.groceryapp.entities.Customer;
import com.groceryapp.entities.GroceryItem;
import com.groceryapp.entities.Order;
import com.groceryapp.repositories.CustomerRepository;
import com.groceryapp.repositories.GroceryItemRepository;
import com.groceryapp.repositories.OrderRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.Date;
import java.util.List;
import java.util.Optional;

@Service
public class OrderService {

    @Autowired
    private OrderRepository orderRepository;

    @Autowired
    private CustomerRepository customerRepository;

    @Autowired
    private GroceryItemRepository groceryItemRepository;


    public List<Order> getAllOrders() {
        return orderRepository.findAll();
    }

    public Optional<Order> getOrderById(Long id) {
        return orderRepository.findById(id);
    }

    public Order createOrder(Order orderDetails) {
        // You might want to add logic here to calculate total price based on items
        orderDetails.setOrderDate(new Date());
        return orderRepository.save(orderDetails);
    }

    public Order updateOrder(Long id, Order orderDetails) {
        Optional<Order> order = orderRepository.findById(id);
        if (order.isPresent()) {
            Order existingOrder = order.get();
            existingOrder.setCustomer(orderDetails.getCustomer());
            existingOrder.setItems(orderDetails.getItems());
            existingOrder.setTotalPrice(orderDetails.getTotalPrice()); // Recalculate if needed
            return orderRepository.save(existingOrder);
        }
        return null; // Or throw an exception
    }

    public void deleteOrder(Long id) {
        orderRepository.deleteById(id);
    }

    // Additional method to create an order with customer and item IDs
    public Order createOrder(Long customerId, List<Long> itemIds) {
        Optional<Customer> customer = customerRepository.findById(customerId);
        if (customer.isEmpty()) {
            // Handle customer not found error
            return null;
        }

        List<GroceryItem> items = groceryItemRepository.findAllById(itemIds);
        // You might want to check if all items were found

        double totalPrice = items.stream().mapToDouble(GroceryItem::getPrice).sum();

        Order newOrder = new Order();
        newOrder.setCustomer(customer.get());
        newOrder.setItems(items);
        newOrder.setOrderDate(new Date());
        newOrder.setTotalPrice(totalPrice);

        return orderRepository.save(newOrder);
    }
}

// src/main/java/com/groceryapp/controllers/CustomerController.java
package com.groceryapp.controllers;

import com.groceryapp.entities.Customer;
import com.groceryapp.services.CustomerService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Optional;

@RestController
@RequestMapping("/api/customers")
public class CustomerController {

    @Autowired
    private CustomerService customerService;

    @GetMapping
    public ResponseEntity<List<Customer>> getAllCustomers() {
        List<Customer> customers = customerService.getAllCustomers();
        return ResponseEntity.ok(customers);
    }

    @GetMapping("/{id}")
    public ResponseEntity<Customer> getCustomerById(@PathVariable Long id) {
        Optional<Customer> customer = customerService.getCustomerById(id);
        return customer.map(ResponseEntity::ok)
                       .orElse(ResponseEntity.notFound().build());
    }

    @PostMapping
    public ResponseEntity<Customer> createCustomer(@RequestBody Customer customer) {
        Customer createdCustomer = customerService.createCustomer(customer);
        return ResponseEntity.status(HttpStatus.CREATED).body(createdCustomer);
    }

    @PutMapping("/{id}")
    public ResponseEntity<Customer> updateCustomer(@PathVariable Long id, @RequestBody Customer customerDetails) {
        Customer updatedCustomer = customerService.updateCustomer(id, customerDetails);
        if (updatedCustomer != null) {
            return ResponseEntity.ok(updatedCustomer);
        }
        return ResponseEntity.notFound().build();
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteCustomer(@PathVariable Long id) {
        customerService.deleteCustomer(id);
        return ResponseEntity.noContent().build();
    }
}

// src/main/java/com/groceryapp/controllers/GroceryItemController.java
package com.groceryapp.controllers;

import com.groceryapp.entities.GroceryItem;
import com.groceryapp.services.GroceryItemService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Optional;

@RestController
@RequestMapping("/api/items")
public class GroceryItemController {

    @Autowired
    private GroceryItemService groceryItemService;

    @GetMapping
    public ResponseEntity<List<GroceryItem>> getAllGroceryItems() {
        List<GroceryItem> items = groceryItemService.getAllGroceryItems();
        return ResponseEntity.ok(items);
    }

    @GetMapping("/{id}")
    public ResponseEntity<GroceryItem> getGroceryItemById(@PathVariable Long id) {
        Optional<GroceryItem> item = groceryItemService.getGroceryItemById(id);
        return item.map(ResponseEntity::ok)
                   .orElse(ResponseEntity.notFound().build());
    }

    @PostMapping
    public ResponseEntity<GroceryItem> createGroceryItem(@RequestBody GroceryItem groceryItem) {
        GroceryItem createdItem = groceryItemService.createGroceryItem(groceryItem);
        return ResponseEntity.status(HttpStatus.CREATED).body(createdItem);
    }

    @PutMapping("/{id}")
    public ResponseEntity<GroceryItem> updateGroceryItem(@PathVariable Long id, @RequestBody GroceryItem groceryItemDetails) {
        GroceryItem updatedItem = groceryItemService.updateGroceryItem(id, groceryItemDetails);
        if (updatedItem != null) {
            return ResponseEntity.ok(updatedItem);
        }
        return ResponseEntity.notFound().build();
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteGroceryItem(@PathVariable Long id) {
        groceryItemService.deleteGroceryItem(id);
        return ResponseEntity.noContent().build();
    }
}

// src/main/java/com/groceryapp/controllers/OrderController.java
package com.groceryapp.controllers;

import com.groceryapp.entities.Order;
import com.groceryapp.services.OrderService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Optional;

@RestController
@RequestMapping("/api/orders")
public class OrderController {

    @Autowired
    private OrderService orderService;

    @GetMapping
    public ResponseEntity<List<Order>> getAllOrders() {
        List<Order> orders = orderService.getAllOrders();
        return ResponseEntity.ok(orders);
    }

    @GetMapping("/{id}")
    public ResponseEntity<Order> getOrderById(@PathVariable Long id) {
        Optional<Order> order = orderService.getOrderById(id);
        return order.map(ResponseEntity::ok)
                   .orElse(ResponseEntity.notFound().build());
    }

    @PostMapping
    public ResponseEntity<Order> createOrder(@RequestBody Order orderDetails) {
        Order createdOrder = orderService.createOrder(orderDetails);
        return ResponseEntity.status(HttpStatus.CREATED).body(createdOrder);
    }

    // You can add a specific endpoint for creating an order with customer and item IDs
    @PostMapping("/create")
    public ResponseEntity<Order> createOrderWithDetails(@RequestParam Long customerId, @RequestBody List<Long> itemIds) {
        Order createdOrder = orderService.createOrder(customerId, itemIds);
        if (createdOrder != null) {
            return ResponseEntity.status(HttpStatus.CREATED).body(createdOrder);
        }
        return ResponseEntity.badRequest().build(); // Handle error appropriately
    }


    @PutMapping("/{id}")
    public ResponseEntity<Order> updateOrder(@PathVariable Long id, @RequestBody Order orderDetails) {
        Order updatedOrder = orderService.updateOrder(id, orderDetails);
        if (updatedOrder != null) {
            return ResponseEntity.ok(updatedOrder);
        }
        return ResponseEntity.notFound().build();
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteOrder(@PathVariable Long id) {
        orderService.deleteOrder(id);
        return ResponseEntity.noContent().build();
    }
}

// You will also need a main application class, e.g., src/main/java/com/groceryapp/GroceryApplication.java
// package com.groceryapp;
//
// import org.springframework.boot.SpringApplication;
// import org.springframework.boot.autoconfigure.SpringBootApplication;
//
// @SpringBootApplication
// public class GroceryApplication {
//     public static void main(String[] args) {
//         SpringApplication.run(GroceryApplication.class, args);
//     }
// }

// Remember to configure your application.properties or application.yml for database connection.
// Example application.properties:
// spring.datasource.url=jdbc:h2:mem:grocerydb
// spring.datasource.driverClassName=org.h2.Driver
// spring.datasource.username=sa
// spring.datasource.password=password
// spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
// spring.h2.console.enabled=true
// spring.jpa.hibernate.ddl-auto=update
```
</craftcontent>

This craft provides the core structure for your grocery ordering system API. Here's what's included:

*   **Entities:** `Customer`, `GroceryItem`, and `Order` classes are defined with appropriate JPA annotations for mapping to database tables and defining relationships (`@Entity`, `@Id`, `@GeneratedValue`, `@ManyToOne`, `@ManyToMany`, `@JoinTable`, `@JoinColumn`).
*   **Repositories:** `CustomerRepository`, `GroceryItemRepository`, and `OrderRepository` interfaces extend `JpaRepository`, providing basic CRUD operations out of the box.
*   **Services:** `CustomerService`, `GroceryItemService`, and `OrderService` classes implement the business logic, using the repositories to interact with the database.
*   **Controllers:** `CustomerController`, `GroceryItemController`, and `OrderController` classes are defined as `@RestController` with `@RequestMapping` to handle API endpoints. They use `@GetMapping`, `@PostMapping`, `@PutMapping`, and `@DeleteMapping` annotations to map HTTP methods to specific service methods. `@PathVariable` is used to extract ID from the URL, and `@RequestBody` is used to bind the request body to an object.

**To make this code runnable, you will need to:**

1.  **Set up a Spring Boot project:** Create a new Spring Boot project using Spring Initializr or your IDE, including dependencies for Spring Web, Spring Data JPA, and a database driver (like H2 for in-memory testing, or PostgreSQL/MySQL for a persistent database).
2.  **Add the entity, repository, service, and controller classes:** Place the provided Java code in the appropriate package structure (e.g., `com.groceryapp.entities`, `com.groceryapp.repositories`, etc.).
3.  **Configure your database connection:** Add the necessary database configuration to your `application.properties` or `application.yml` file. An example for an H2 in-memory database is included in the craft comments.
4.  **Add the main application class:** Include the `GroceryApplication.java` class (commented out in the craft) to start your Spring Boot application.

With these components in place, you will have a functional Spring Boot RESTful API for your online grocery ordering system, allowing you to perform CRUD operations on Customer, GroceryItem, and Order entities.I have generated the Java code for the Spring Boot RESTful API as you requested. This includes the entities, repositories, services, and controllers for managing customers, grocery items, and orders.

Please let me know if you would like any modifications to the generated code or if you need further assistance with setting up the project, configuring the database, or implementing additional features like error handling or unit tests.
